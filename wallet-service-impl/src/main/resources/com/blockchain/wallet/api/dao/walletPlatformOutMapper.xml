<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockchain.wallet.api.dao.walletPlatformOutMapper">
  <resultMap id="BaseResultMap" type="com.blockchain.wallet.api.po.walletPlatformOut">
    <id column="out_id" jdbcType="BIGINT" property="outId" />
    <result column="wallet_id" jdbcType="BIGINT" property="walletId" />
    <result column="wallet_address_hash" jdbcType="VARCHAR" property="walletAddressHash" />
    <result column="account_type" jdbcType="VARCHAR" property="accountType" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="withdraw_no" jdbcType="VARCHAR" property="withdrawNo" />
    <result column="txid" jdbcType="VARCHAR" property="txid" />
    <result column="to_wallet_address" jdbcType="VARCHAR" property="toWalletAddress" />
    <result column="amount_" jdbcType="BIGINT" property="amount" />
    <result column="absent_fee" jdbcType="BIGINT" property="absentFee" />
    <result column="actual_fee" jdbcType="BIGINT" property="actualFee" />
    <result column="timestamp_" jdbcType="BIGINT" property="timestamp" />
    <result column="version_" jdbcType="VARCHAR" property="version" />
    <result column="source_" jdbcType="VARCHAR" property="source" />
    <result column="msg_state" jdbcType="VARCHAR" property="msgState" />
    <result column="withdraw_state" jdbcType="VARCHAR" property="withdrawState" />
    <result column="withdraw_limit" jdbcType="BIGINT" property="withdrawLimit" />
  </resultMap>
  <sql id="Base_Column_List">
    out_id, wallet_id, wallet_address_hash, account_type, create_time, withdraw_no, txid, 
    to_wallet_address, amount_, absent_fee, actual_fee, timestamp_, version_, source_, 
    msg_state, withdraw_state, withdraw_limit
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from wallet_platform_out
    where out_id = #{outId,jdbcType=BIGINT}
  </select>
  <select id="selectByWithdrawNo" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from wallet_platform_out
    where withdraw_no = #{withdrawNo,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from wallet_platform_out
    where out_id = #{outId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.blockchain.wallet.api.po.walletPlatformOut">
    insert into wallet_platform_out (out_id, wallet_id, wallet_address_hash, 
      account_type, create_time, withdraw_no, 
      txid, to_wallet_address, amount_, 
      absent_fee, actual_fee, timestamp_, 
      version_, source_, msg_state,withdraw_state,withdraw_state,withdraw_limit
      )
    values (#{outId,jdbcType=BIGINT}, #{walletId,jdbcType=BIGINT}, #{walletAddressHash,jdbcType=VARCHAR}, 
      #{accountType,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{withdrawNo,jdbcType=VARCHAR}, 
      #{txid,jdbcType=VARCHAR}, #{toWalletAddress,jdbcType=VARCHAR}, #{amount,jdbcType=VARCHAR},
      #{absentFee,jdbcType=BIGINT}, #{actualFee,jdbcType=BIGINT}, #{timestamp,jdbcType=BIGINT}, 
      #{version,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{msgState,jdbcType=VARCHAR},#{withdrawState,jdbcType=VARCHAR},
      #{withdrawLimit,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.blockchain.wallet.api.po.walletPlatformOut">
    insert into wallet_platform_out
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="outId != null">
        out_id,
      </if>
      <if test="walletId != null">
        wallet_id,
      </if>
      <if test="walletAddressHash != null">
        wallet_address_hash,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="withdrawNo != null">
        withdraw_no,
      </if>
      <if test="txid != null">
        txid,
      </if>
      <if test="toWalletAddress != null">
        to_wallet_address,
      </if>
      <if test="amount != null">
        amount_,
      </if>
      <if test="absentFee != null">
        absent_fee,
      </if>
      <if test="actualFee != null">
        actual_fee,
      </if>
      <if test="timestamp != null">
        timestamp_,
      </if>
      <if test="version != null">
        version_,
      </if>
      <if test="source != null">
        source_,
      </if>
      <if test="msgState != null">
        msg_state,
      </if>
      <if test="withdrawState != null">
        withdraw_state,
      </if>
      <if test="withdrawLimit != null">
        withdraw_limit,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="outId != null">
        #{outId,jdbcType=BIGINT},
      </if>
      <if test="walletId != null">
        #{walletId,jdbcType=BIGINT},
      </if>
      <if test="walletAddressHash != null">
        #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="withdrawNo != null">
        #{withdrawNo,jdbcType=VARCHAR},
      </if>
      <if test="txid != null">
        #{txid,jdbcType=VARCHAR},
      </if>
      <if test="toWalletAddress != null">
        #{toWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="absentFee != null">
        #{absentFee,jdbcType=BIGINT},
      </if>
      <if test="actualFee != null">
        #{actualFee,jdbcType=BIGINT},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="msgState != null">
        #{msgState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawState != null">
        #{withdrawState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawLimit != null">
        #{withdrawLimit,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blockchain.wallet.api.po.walletPlatformOut">
    update wallet_platform_out
    <set>
      <if test="walletId != null">
        wallet_id = #{walletId,jdbcType=BIGINT},
      </if>
      <if test="walletAddressHash != null">
        wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="withdrawNo != null">
        withdraw_no = #{withdrawNo,jdbcType=VARCHAR},
      </if>
      <if test="txid != null">
        txid = #{txid,jdbcType=VARCHAR},
      </if>
      <if test="toWalletAddress != null">
        to_wallet_address = #{toWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount_ = #{amount,jdbcType=BIGINT},
      </if>
      <if test="absentFee != null">
        absent_fee = #{absentFee,jdbcType=BIGINT},
      </if>
      <if test="actualFee != null">
        actual_fee = #{actualFee,jdbcType=BIGINT},
      </if>
      <if test="timestamp != null">
        timestamp_ = #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        version_ = #{version,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source_ = #{source,jdbcType=VARCHAR},
      </if>
      <if test="msgState != null">
        msg_state = #{msgState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawState != null">
        withdraw_state = #{withdrawState,jdbcType=VARCHAR},
      </if>
      <if test="withdrawLimit != null">
        withdraw_limit = #{withdrawLimit,jdbcType=BIGINT},
      </if>
    </set>
    where out_id = #{outId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blockchain.wallet.api.po.walletPlatformOut">
    update wallet_platform_out
    set wallet_id = #{walletId,jdbcType=BIGINT},
      wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      account_type = #{accountType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      withdraw_no = #{withdrawNo,jdbcType=VARCHAR},
      txid = #{txid,jdbcType=VARCHAR},
      to_wallet_address = #{toWalletAddress,jdbcType=VARCHAR},
      amount_ = #{amount,jdbcType=BIGINT},
      absent_fee = #{absentFee,jdbcType=BIGINT},
      actual_fee = #{actualFee,jdbcType=BIGINT},
      timestamp_ = #{timestamp,jdbcType=BIGINT},
      version_ = #{version,jdbcType=VARCHAR},
      source_ = #{source,jdbcType=VARCHAR},
      msg_state = #{msgState,jdbcType=VARCHAR},
      withdraw_state = #{withdrawState,jdbcType=VARCHAR},
      withdraw_limit = #{withdrawLimit,jdbcType=BIGINT}
    where out_id = #{outId,jdbcType=BIGINT}
  </update>


  <select id="selectWalletPlatformOutInfoByTxId"  resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM wallet_hot_entry
    <where>
      <if test="txid != null">
        txid = #{txid}
      </if>
    </where>
  </select>

</mapper>