<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockchain.wallet.api.dao.WalletColdMapper">
  <resultMap id="BaseResultMap" type="com.blockchain.wallet.api.po.WalletCold">
    <id column="wallet_id" jdbcType="INTEGER" property="walletId" />
    <result column="wallet_address_hash" jdbcType="VARCHAR" property="walletAddressHash" />
    <result column="use_status" jdbcType="BIT" property="useStatus" />
    <result column="account_type" jdbcType="VARCHAR" property="accountType" />
    <result column="create_time" jdbcType="INTEGER" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    wallet_id, wallet_address_hash, use_status, account_type, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from wallet_cold
    where wallet_id = #{walletId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from wallet_cold
    where wallet_id = #{walletId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.blockchain.wallet.api.po.WalletCold">
    insert into wallet_cold (wallet_id, wallet_address_hash, use_status, 
      account_type, create_time)
    values (#{walletId,jdbcType=INTEGER}, #{walletAddressHash,jdbcType=VARCHAR}, #{useStatus,jdbcType=BIT}, 
      #{accountType,jdbcType=VARCHAR}, #{createTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.blockchain.wallet.api.po.WalletCold">
    insert into wallet_cold
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="walletId != null">
        wallet_id,
      </if>
      <if test="walletAddressHash != null">
        wallet_address_hash,
      </if>
      <if test="useStatus != null">
        use_status,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="walletId != null">
        #{walletId,jdbcType=INTEGER},
      </if>
      <if test="walletAddressHash != null">
        #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="useStatus != null">
        #{useStatus,jdbcType=BIT},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blockchain.wallet.api.po.WalletCold">
    update wallet_cold
    <set>
      <if test="walletAddressHash != null">
        wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="useStatus != null">
        use_status = #{useStatus,jdbcType=BIT},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
    </set>
    where wallet_id = #{walletId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blockchain.wallet.api.po.WalletCold">
    update wallet_cold
    set wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      use_status = #{useStatus,jdbcType=BIT},
      account_type = #{accountType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=INTEGER}
    where wallet_id = #{walletId,jdbcType=INTEGER}
  </update>

  <select id="selectWalletAccount"  resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM wallet_cold
    <where>
      <if test="accountType != null">
        and account_type = #{accountType}
      </if>
      <if test="walletAddressHash != null">
        and wallet_address_hash = #{walletAddressHash}
      </if>
      and use_status = 0
    </where>
  </select>
  

</mapper>