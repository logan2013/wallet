<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blockchain.wallet.api.dao.walletHotEntryMapper">
  <resultMap id="BaseResultMap" type="com.blockchain.wallet.api.po.walletHotEntry">
    <id column="entry_id" jdbcType="INTEGER" property="entryId" />
    <result column="wallet_id" jdbcType="INTEGER" property="walletId" />
    <result column="wallet_address_hash" jdbcType="VARCHAR" property="walletAddressHash" />
    <result column="account_type" jdbcType="VARCHAR" property="accountType" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="txid" jdbcType="VARCHAR" property="txid" />
    <result column="from_wallet_address" jdbcType="VARCHAR" property="fromWalletAddress" />
    <result column="amount_" jdbcType="VARCHAR" property="amount" />
    <result column="timestamp_" jdbcType="BIGINT" property="timestamp" />
    <result column="version_" jdbcType="VARCHAR" property="version" />
    <result column="source_" jdbcType="VARCHAR" property="source" />
    <result column="msg_state" jdbcType="VARCHAR" property="msgState" />
    <result column="vout" jdbcType="INTEGER" property="vout" />
    <result column="confirmations" jdbcType="INTEGER" property="confirmations" />
    <result column="height" jdbcType="INTEGER" property="height" />
  </resultMap>
  <resultMap id="BaseResultMapSend" type="com.blockchain.wallet.api.dto.WalletUsdtMsgDTO">
    <result column="wallet_address_hash" jdbcType="VARCHAR" property="walletAddressHash" />
    <result column="account_type" jdbcType="VARCHAR" property="accountType" />
    <result column="txid" jdbcType="VARCHAR" property="txid" />
    <result column="amount_" jdbcType="BIGINT" property="amount" />
    <result column="timestamp_" jdbcType="BIGINT" property="timestamp" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
  </resultMap>
  <sql id="Base_Column_List">
    entry_id, wallet_id, wallet_address_hash, account_type, create_time, txid, from_wallet_address, 
    amount_, timestamp_, version_, source_, msg_state, vout, confirmations, height
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from wallet_hot_entry
    where entry_id = #{entryId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from wallet_hot_entry
    where entry_id = #{entryId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    insert into wallet_hot_entry (entry_id, wallet_id, wallet_address_hash, 
      account_type, create_time, txid, 
      from_wallet_address, amount_, timestamp_, 
      version_, source_, msg_state, 
      vout, confirmations, height
      )
    values (#{entryId,jdbcType=INTEGER}, #{walletId,jdbcType=INTEGER}, #{walletAddressHash,jdbcType=VARCHAR}, 
      #{accountType,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, #{txid,jdbcType=VARCHAR}, 
      #{fromWalletAddress,jdbcType=VARCHAR}, #{amount,jdbcType=VARCHAR}, #{timestamp,jdbcType=BIGINT}, 
      #{version,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{msgState,jdbcType=VARCHAR}, 
      #{vout,jdbcType=INTEGER}, #{confirmations,jdbcType=INTEGER}, #{height,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    insert into wallet_hot_entry
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="entryId != null">
        entry_id,
      </if>
      <if test="walletId != null">
        wallet_id,
      </if>
      <if test="walletAddressHash != null">
        wallet_address_hash,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="txid != null">
        txid,
      </if>
      <if test="fromWalletAddress != null">
        from_wallet_address,
      </if>
      <if test="amount != null">
        amount_,
      </if>
      <if test="timestamp != null">
        timestamp_,
      </if>
      <if test="version != null">
        version_,
      </if>
      <if test="source != null">
        source_,
      </if>
      <if test="msgState != null">
        msg_state,
      </if>
      <if test="vout != null">
        vout,
      </if>
      <if test="confirmations != null">
        confirmations,
      </if>
      <if test="height != null">
        height,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="entryId != null">
        #{entryId,jdbcType=INTEGER},
      </if>
      <if test="walletId != null">
        #{walletId,jdbcType=INTEGER},
      </if>
      <if test="walletAddressHash != null">
        #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="txid != null">
        #{txid,jdbcType=VARCHAR},
      </if>
      <if test="fromWalletAddress != null">
        #{fromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="msgState != null">
        #{msgState,jdbcType=VARCHAR},
      </if>
      <if test="vout != null">
        #{vout,jdbcType=INTEGER},
      </if>
      <if test="confirmations != null">
        #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    update wallet_hot_entry
    <set>
      <if test="walletId != null">
        wallet_id = #{walletId,jdbcType=INTEGER},
      </if>
      <if test="walletAddressHash != null">
        wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="txid != null">
        txid = #{txid,jdbcType=VARCHAR},
      </if>
      <if test="fromWalletAddress != null">
        from_wallet_address = #{fromWalletAddress,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount_ = #{amount,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        timestamp_ = #{timestamp,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        version_ = #{version,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source_ = #{source,jdbcType=VARCHAR},
      </if>
      <if test="msgState != null">
        msg_state = #{msgState,jdbcType=VARCHAR},
      </if>
      <if test="vout != null">
        vout = #{vout,jdbcType=INTEGER},
      </if>
      <if test="confirmations != null">
        confirmations = #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
    </set>
    where entry_id = #{entryId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    update wallet_hot_entry
    set wallet_id = #{walletId,jdbcType=INTEGER},
      wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR},
      account_type = #{accountType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      txid = #{txid,jdbcType=VARCHAR},
      from_wallet_address = #{fromWalletAddress,jdbcType=VARCHAR},
      amount_ = #{amount,jdbcType=VARCHAR},
      timestamp_ = #{timestamp,jdbcType=BIGINT},
      version_ = #{version,jdbcType=VARCHAR},
      source_ = #{source,jdbcType=VARCHAR},
      msg_state = #{msgState,jdbcType=VARCHAR},
      vout = #{vout,jdbcType=INTEGER},
      confirmations = #{confirmations,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER}
    where entry_id = #{entryId,jdbcType=INTEGER}
  </update>

  <select id="selectWalletHotEntry"  resultMap="BaseResultMap"  parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    SELECT
    <include refid="Base_Column_List" />
    FROM wallet_hot_entry
    <where>
      <if test="txid != null">
        txid = #{txid,jdbcType=VARCHAR}
      </if>
      <if test="msgState != null">
        and msg_state = #{msgState,jdbcType=VARCHAR}
      </if>
      <if test="walletAddressHash != null">
        and wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <select id="selectWalletHotEntryInfo"  resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM wallet_hot_entry ORDER BY entry_id DESC LIMIT 1
  </select>

    <select id="selectWalletHotEntryByCount"  resultMap="BaseResultMap">
    SELECT
        <include refid="Base_Column_List" />
    FROM wallet_account
    GROUP  BY txid HAVING COUNT (txid) <![CDATA[ > ]]> 1
  </select>

  <select id="selectWalletHotEntryByblockScan"  resultMap="BaseResultMapSend">
    SELECT a.wallet_address_hash,a.timestamp_,a.amount_,a.txid,a.account_type,b.user_name
    FROM wallet_hot_entry a left join wallet_hot b
    ON a.wallet_address_hash=b.wallet_address_hash
    <where>
      <if test="height != null">
         a.height= #{height}
      </if>
      <if test="msgState != null">
        and a.msg_state != #{msgState}
      </if>
    </where>
  </select>

  <update id="updateByHeightSelective" parameterType="com.blockchain.wallet.api.po.walletHotEntry">
    update wallet_hot_entry
    <set>
      <if test="msgState != null">
        msg_state = #{msgState,jdbcType=VARCHAR},
      </if>
    </set>
    where txid = #{txid,jdbcType=VARCHAR}

  </update>

  <select id="selectWalletAccount"  resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM wallet_hot_entry
    <where>
      <if test="txid != null">
        txid = #{txid,jdbcType=VARCHAR}
      </if>
      <if test="msgState != null">
        and msg_state = #{msgState,jdbcType=VARCHAR}
      </if>
      <if test="walletAddressHash != null">
        and wallet_address_hash = #{walletAddressHash,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

</mapper>